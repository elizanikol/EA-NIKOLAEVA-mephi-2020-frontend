{"ast":null,"code":"var _jsxFileName = \"/Users/elizabethnikolaeva/WebstormProjects/frontend/src/components/forms/LoginForm.jsx\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nconst required = value => value ? undefined : 'Required';\n\nconst maxLength = max => value => value && value.length > max ? `Must be ${max} characters or less` : undefined;\n\nconst maxLength15 = maxLength(15);\n\nconst number = value => value && isNaN(Number(value)) ? 'Must be a number' : undefined;\n\nconst minValue = min => value => value && value < min ? `Must be at least ${min}` : undefined;\n\nconst minValue18 = minValue(18);\n\nconst email = value => value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Invalid email address' : undefined;\n\nconst tooOld = value => value && value > 65 ? 'You might be too old for this' : undefined;\n\nconst aol = value => value && /.+@aol\\.com/.test(value) ? 'Really? You still use AOL for your email?' : undefined;\n\nconst renderField = ({\n  input,\n  label,\n  type,\n  meta: {\n    touched,\n    error,\n    warning\n  }\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"label\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }\n}, label), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n  placeholder: label,\n  type: type,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 13\n  }\n})), touched && (error && /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 36\n  }\n}, error) || warning && /*#__PURE__*/React.createElement(\"span\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 73\n  }\n}, warning))));\n\nconst FieldLevelValidationForm = props => {\n  const {\n    handleSubmit,\n    pristine,\n    reset,\n    submitting\n  } = props;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"username\",\n    type: \"text\",\n    component: renderField,\n    label: \"Username\",\n    validate: [required, maxLength15],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"email\",\n    type: \"email\",\n    component: renderField,\n    label: \"Email\",\n    validate: email,\n    warn: aol,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    name: \"age\",\n    type: \"number\",\n    component: renderField,\n    label: \"Age\",\n    validate: [required, number, minValue18],\n    warn: tooOld,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    disabled: pristine || submitting,\n    onClick: reset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"Clear Values\")));\n};\n\nexport default reduxForm({\n  form: 'fieldLevelValidation' // a unique identifier for this form\n\n})(FieldLevelValidationForm);\n/*import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nconst required = value => (value || typeof value === 'number' ? undefined : 'Required')\nexport const minLength = min => value =>\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\nexport const minLength8 = minLength(8)\n\nconst renderField = ({\n                         input,\n                         label,\n                         type,\n                         meta: { touched, error, warning }\n                     }) => (\n    <div>\n        <label>{label}</label>\n        <div>\n            <input {...input} placeholder={label} type={type} />\n            {touched &&\n            ((error && <span>{error}</span>) ||\n                (warning && <span>{warning}</span>))}\n        </div>\n    </div>\n)\n\nconst SimpleForm = props => {\n    const { handleSubmit, pristine, reset, submitting } = props;\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <label>Name</label>\n                <div>\n                    <Field\n                        name=\"name\"\n                        component=\"input\"\n                        type=\"text\"\n                        placeholder=\"First Name\"\n                    />\n                </div>\n            </div>\n            <div>\n                <label>Email</label>\n                <div>\n                    <Field\n                        name=\"email\"\n                        component=\"input\"\n                        type=\"email\"\n                        placeholder=\"Email\"\n                    />\n                </div>\n            </div>\n            <div>\n                <label>Password</label>\n                <div>\n                    <Field\n                        name=\"password\"\n                        component=\"input\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        component={renderField}\n                        validate={[required, minLength8]}\n                    />\n                </div>\n            </div>\n            <div>\n                <label>Password</label>\n                <div>\n                    <Field\n                        name=\"password\"\n                        component=\"input\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                    />\n                </div>\n            </div>\n            <div>\n                <button type=\"submit\" disabled={pristine || submitting}>Submit</button>\n                <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\n                    Clear Values\n                </button>\n            </div>\n        </form>\n    );\n};\n\nexport default reduxForm({\n    form: 'simple',\n})(SimpleForm);*/\n\n/*import React, { Component } from \"react\";\nimport Button from '../buttons/Button'\nimport {NavLink} from \"react-router-dom\";\n\nconst validate = (state) => {\n    return (state.email.length > 0 && state.password.length >= 6);\n};\n\nclass Login extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n\n            errors: {\n                email: '',\n                password: '',\n            }\n        };\n    }\n\n    handleChange = event => {\n        const {name, value} = event.target;\n        const errors = this.state.errors;\n        const validEmailRegex = RegExp(/(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([\\t]*\\r\\n)?[\\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([\\t]*\\r\\n)?[\\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i);\n\n        switch (name) {\n            case 'email':\n                errors.email = validEmailRegex.test(value) ? '' : <strong>Email is not valid!</strong>;\n                break;\n\n            case 'password':\n                errors.password = (value.length < 6) ? <strong>Your password must be at least 6 characters long!</strong> : '';\n                break;\n\n            default:\n                break;\n        }\n\n        this.setState({ errors, [name]: event.target.value });\n    };\n\n    render() {\n        const isDisabled = !validate(this.state);\n\n        return (\n            <form>\n                <h2>Login</h2>\n\n                <input type=\"text\" class =\"box\" placeholder=\"Enter a valid email\" name = 'email' value={this.state.email} onChange={this.handleChange}/>\n                <div class=\"subString\">{this.state.errors.email}</div>\n\n                <br/>\n                <input type=\"password\" class =\"box\" placeholder=\"Enter password\" name = 'password' value={this.state.password} onChange={this.handleChange}/>\n                <div class=\"subString\">{this.state.errors.password}</div>\n\n                <br/>\n                <NavLink to=\"/home\"><Button disabled={isDisabled}>Login</Button></NavLink>\n            </form>\n        );\n    }\n}\n\nexport default Login;*/","map":{"version":3,"sources":["/Users/elizabethnikolaeva/WebstormProjects/frontend/src/components/forms/LoginForm.jsx"],"names":["React","Field","reduxForm","required","value","undefined","maxLength","max","length","maxLength15","number","isNaN","Number","minValue","min","minValue18","email","test","tooOld","aol","renderField","input","label","type","meta","touched","error","warning","FieldLevelValidationForm","props","handleSubmit","pristine","reset","submitting","form"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\n\nconst required = value => value ? undefined : 'Required'\nconst maxLength = max => value =>\n    value && value.length > max ? `Must be ${max} characters or less` : undefined\nconst maxLength15 = maxLength(15)\nconst number = value => value && isNaN(Number(value)) ? 'Must be a number' : undefined\nconst minValue = min => value =>\n    value && value < min ? `Must be at least ${min}` : undefined\nconst minValue18 = minValue(18)\nconst email = value =>\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\n        'Invalid email address' : undefined\nconst tooOld = value =>\n    value && value > 65 ? 'You might be too old for this' : undefined\nconst aol = value =>\n    value && /.+@aol\\.com/.test(value) ?\n        'Really? You still use AOL for your email?' : undefined\n\nconst renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\n    <div>\n        <label>{label}</label>\n        <div>\n            <input {...input} placeholder={label} type={type}/>\n            {touched && ((error && <span>{error}</span>) || (warning && <span>{warning}</span>))}\n        </div>\n    </div>\n)\n\nconst FieldLevelValidationForm = (props) => {\n    const { handleSubmit, pristine, reset, submitting } = props\n    return (\n        <form onSubmit={handleSubmit}>\n            <Field name=\"username\" type=\"text\"\n                   component={renderField} label=\"Username\"\n                   validate={[ required, maxLength15 ]}\n            />\n            <Field name=\"email\" type=\"email\"\n                   component={renderField} label=\"Email\"\n                   validate={email}\n                   warn={aol}\n            />\n            <Field name=\"age\" type=\"number\"\n                   component={renderField} label=\"Age\"\n                   validate={[ required, number, minValue18 ]}\n                   warn={tooOld}\n            />\n            <div>\n                <button type=\"submit\" disabled={submitting}>Submit</button>\n                <button type=\"button\" disabled={pristine || submitting} onClick={reset}>Clear Values</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm({\n    form: 'fieldLevelValidation' // a unique identifier for this form\n})(FieldLevelValidationForm)\n\n/*import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nconst required = value => (value || typeof value === 'number' ? undefined : 'Required')\nexport const minLength = min => value =>\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\nexport const minLength8 = minLength(8)\n\nconst renderField = ({\n                         input,\n                         label,\n                         type,\n                         meta: { touched, error, warning }\n                     }) => (\n    <div>\n        <label>{label}</label>\n        <div>\n            <input {...input} placeholder={label} type={type} />\n            {touched &&\n            ((error && <span>{error}</span>) ||\n                (warning && <span>{warning}</span>))}\n        </div>\n    </div>\n)\n\nconst SimpleForm = props => {\n    const { handleSubmit, pristine, reset, submitting } = props;\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <label>Name</label>\n                <div>\n                    <Field\n                        name=\"name\"\n                        component=\"input\"\n                        type=\"text\"\n                        placeholder=\"First Name\"\n                    />\n                </div>\n            </div>\n            <div>\n                <label>Email</label>\n                <div>\n                    <Field\n                        name=\"email\"\n                        component=\"input\"\n                        type=\"email\"\n                        placeholder=\"Email\"\n                    />\n                </div>\n            </div>\n            <div>\n                <label>Password</label>\n                <div>\n                    <Field\n                        name=\"password\"\n                        component=\"input\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        component={renderField}\n                        validate={[required, minLength8]}\n                    />\n                </div>\n            </div>\n            <div>\n                <label>Password</label>\n                <div>\n                    <Field\n                        name=\"password\"\n                        component=\"input\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                    />\n                </div>\n            </div>\n            <div>\n                <button type=\"submit\" disabled={pristine || submitting}>Submit</button>\n                <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\n                    Clear Values\n                </button>\n            </div>\n        </form>\n    );\n};\n\nexport default reduxForm({\n    form: 'simple',\n})(SimpleForm);*/\n\n\n\n/*import React, { Component } from \"react\";\nimport Button from '../buttons/Button'\nimport {NavLink} from \"react-router-dom\";\n\nconst validate = (state) => {\n    return (state.email.length > 0 && state.password.length >= 6);\n};\n\nclass Login extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n\n            errors: {\n                email: '',\n                password: '',\n            }\n        };\n    }\n\n    handleChange = event => {\n        const {name, value} = event.target;\n        const errors = this.state.errors;\n        const validEmailRegex = RegExp(/(?!.*\\.{2})^([a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.[a-z\\d!#$%&'*+\\-\\/=?^_`{|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)*|\"((([\\t]*\\r\\n)?[\\t]+)?([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*(([\\t]*\\r\\n)?[\\t]+)?\")@(([a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\d\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.)+([a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF][a-z\\d\\-._~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]*[a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])\\.?$/i);\n\n        switch (name) {\n            case 'email':\n                errors.email = validEmailRegex.test(value) ? '' : <strong>Email is not valid!</strong>;\n                break;\n\n            case 'password':\n                errors.password = (value.length < 6) ? <strong>Your password must be at least 6 characters long!</strong> : '';\n                break;\n\n            default:\n                break;\n        }\n\n        this.setState({ errors, [name]: event.target.value });\n    };\n\n    render() {\n        const isDisabled = !validate(this.state);\n\n        return (\n            <form>\n                <h2>Login</h2>\n\n                <input type=\"text\" class =\"box\" placeholder=\"Enter a valid email\" name = 'email' value={this.state.email} onChange={this.handleChange}/>\n                <div class=\"subString\">{this.state.errors.email}</div>\n\n                <br/>\n                <input type=\"password\" class =\"box\" placeholder=\"Enter password\" name = 'password' value={this.state.password} onChange={this.handleChange}/>\n                <div class=\"subString\">{this.state.errors.password}</div>\n\n                <br/>\n                <NavLink to=\"/home\"><Button disabled={isDisabled}>Login</Button></NavLink>\n            </form>\n        );\n    }\n}\n\nexport default Login;*/\n\n\n\n"]},"metadata":{},"sourceType":"module"}